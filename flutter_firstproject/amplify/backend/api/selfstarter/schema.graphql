enum ChatItemType {
  TEXT
  IMAGE
}

type ChatItem @model @auth(rules: [{allow: public}]) {
  id: ID!
  senderId: String
  receiverId: String
  message: String
  imageUrl: String
  itemType: ChatItemType
  createdOn: AWSDateTime
  chatID: ID! @index(name: "byChat")
}

type Chat @model @auth(rules: [{allow: public}]) {
  id: ID!
  receiverId: String
  senderId: String
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  chatUsers: [User] @manyToMany(relationName: "ChatUser")
  ChatItems: [ChatItem] @hasMany(indexName: "byChat", fields: ["id"])
}

type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  userId: String
  postID: ID! @index(name: "byPost")
  commentText: String
}

enum PostType {
  TEXT
  TEXT_IMAGE
}

enum PostStatus {
  CREATED
  UPDATED
  DELETED
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String
  postImageUrl: String
  status: PostStatus
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  type: PostType
  userID: ID! @index(name: "byUser")
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String
  firstName: String
  lastName: String
  isVerified: Boolean
  profilePicUrl: String
  email: AWSEmail
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  chats: [Chat] @manyToMany(relationName: "ChatUser")
}
 